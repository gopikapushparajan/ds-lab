#include<stdio.h>
#include<stdlib.h>

typedef struct BST
{
    int data;
    struct BST *left;
    struct BST *right;
} node;


node* create()
{
    node *temp;
    printf("\nEnter data: ");
    temp = (node*)malloc(sizeof(node));
    scanf("%d", &temp->data);
    temp->left = temp->right = NULL;
    return temp;
}


void insert(node *root, node *temp)
{
    if (temp->data < root->data)
    {
        if (root->left != NULL)
            insert(root->left, temp);
        else
            root->left = temp;
    }
    else if (temp->data > root->data)
    {
        if (root->right != NULL)
            insert(root->right, temp);
        else
            root->right = temp;
    }
}


void inorder(node *root)
{
    if (root != NULL)
    {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

void postorder(node *root)
{
    if (root != NULL)
    {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}


void preorder(node *root)
{
    if (root != NULL)
    {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

int main()
{
    node *root = NULL;
    node *newNode;

    int choice;
    while (1)
    {
        printf("\nBST Operations Menu:\n");
        printf("1. Insert a node\n");
        printf("2. Inorder traversal\n");
        printf("3. Preorder traversal\n");
        printf("4. Postorder traversal\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
            case 1:
                newNode = create();
                if (root == NULL)
                {
                    root = newNode; 
                }
                else
                {
                    insert(root, newNode);
                }
                break;
                
            case 2:
                printf("\nInorder Traversal: ");
                inorder(root);
                printf("\n");
                break;

            case 3:
                printf("\nPreorder Traversal: ");
                preorder(root);
                printf("\n");
                break;

            case 4:
                printf("\nPostorder Traversal: ");
                postorder(root);
                printf("\n");
                break;

            case 5:
                printf("\nExiting program...\n");
                exit(0);

            default:
                printf("\nInvalid choice. Please try again.\n");
        }
    }

    return 0;
}
